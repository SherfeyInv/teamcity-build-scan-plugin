import jetbrains.buildServer.messages.serviceMessages.ServiceMessage

if (!gradleVersionSupported()) {
    return
}

initscript {
    dependencies {
        def teamCityInitLib = System.getenv('TEAMCITY_BUILD_INIT_PATH')
        def classPathFiles = teamCityInitLib.split(File.pathSeparator)
        classpath files(classPathFiles)
    }
}

def serviceMessageName = 'nu.studer.teamcity.buildscan.buildScanLifeCycle'
logger.quiet(ServiceMessage.asString(serviceMessageName, 'BUILD_STARTED').toString())

def BUILD_SCAN_PLUGIN_ID = 'com.gradle.build-scan'
def GRADLE_ENTERPRISE_PLUGIN_ID = 'com.gradle.enterprise'

def buildScanPublishedAction = { def buildScan ->
    if (buildScan.metaClass.respondsTo(buildScan, 'buildScanPublished', Action)) {
        buildScan.buildScanPublished { scan ->
            logger.quiet(ServiceMessage.asString(serviceMessageName, "BUILD_SCAN_URL:${scan.buildScanUri.toString()}"))
        }
    }
}

// Gradle 4.1+ and 5.+
rootProject {
    pluginManager.withPlugin(BUILD_SCAN_PLUGIN_ID) {
        buildScanPublishedAction(buildScan)
    }
}

// Gradle 6.+
gradle.settingsEvaluated { settings ->
    settings.pluginManager.withPlugin(GRADLE_ENTERPRISE_PLUGIN_ID) {
        buildScanPublishedAction(settings.gradleEnterprise.buildScan)
    }
}

// require at least Gradle 4.1 (build scan plugin 1.8)
boolean gradleVersionSupported() {
    def parts = gradle.gradleVersion.split('\\.')
    if (parts.length < 2) {
        false
    } else {
        def major = parts[0]
        def minor = parts[1]
        if (major < '4') {
            false
        } else if (major == '4' && minor < '1') {
            false
        } else {
            true
        }
    }
}
