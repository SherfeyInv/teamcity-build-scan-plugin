import org.gradle.util.GradleVersion

if (GradleVersion.current() < GradleVersion.version('4.1')) {
    logger.warn("TeamCity Build Scan plugin requires at least Gradle 4.1. Build uses Gradle ${GradleVersion.current()}.")
    return
}

logger.quiet(generateBuildScanLifeCycleMessage('BUILD_STARTED'))

def BUILD_SCAN_PLUGIN_ID = 'com.gradle.build-scan'
def GRADLE_ENTERPRISE_EXTENSION_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterpriseExtension'

def buildScanPublishedAction = { def buildScan ->
    if (buildScan.metaClass.respondsTo(buildScan, 'buildScanPublished', Action)) {
        buildScan.buildScanPublished { scan ->
            logger.quiet(generateBuildScanLifeCycleMessage("BUILD_SCAN_URL:${scan.buildScanUri.toString()}"))
        }
    }
}

if (GradleVersion.current() < GradleVersion.version('6.0')) {
    // Gradle 4.1+ and 5.+
    rootProject {
        pluginManager.withPlugin(BUILD_SCAN_PLUGIN_ID) {
            buildScanPublishedAction(buildScan)
        }
    }
} else {
    // Gradle 6.+
    gradle.settingsEvaluated { settings ->
        extensionsWithPublicType(settings, GRADLE_ENTERPRISE_EXTENSION_CLASS).each {
            buildScanPublishedAction(settings[it.name].buildScan)
        }
    }
}

static def extensionsWithPublicType(def container, String publicType) {
    container.extensions.extensionsSchema.elements.findAll { it.publicType.concreteClass.name == publicType }
}

static String generateBuildScanLifeCycleMessage(def attribute) {
    return "##teamcity[nu.studer.teamcity.buildscan.buildScanLifeCycle '${escape(attribute as String)}']" as String
}

static String escape(String value) {
    return value?.toCharArray()?.collect{ch -> escapeChar(ch) }?.join()
}

static String escapeChar(char ch) {
    String escapeCharacter = "|"
    switch (ch) {
        case '\n': return escapeCharacter + "n";
        case '\r': return escapeCharacter + "r";
        case '|': return escapeCharacter + "|";
        case '\'': return escapeCharacter + "\'";
        case '[': return escapeCharacter + "[";
        case ']': return escapeCharacter + "]";
        default: return ch < 128 ? ch as String : escapeCharacter + String.format("0x%04x", (int)ch);
    }
}